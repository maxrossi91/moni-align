#!/usr/bin/env python3

# Edited from bigbwt script file

import sys, time, argparse, subprocess, os.path, threading, tempfile

Description = """
                  __  __  ____  _   _ _____
                |  \/  |/ __ \| \ | |_   _|
                | \  / | |  | |  \| | | |
                | |\/| | |  | | . ` | | |
                | |  | | |__| | |\  |_| |_
                |_|  |_|\____/|_| \_|_____|
                                  ver 0.1.0
MEM-finder with Multi-Genome references.

Build the index for highly repetive files using the approach
described in

   "MONI: A Pangenomics Index for Finding MEMs"
   by Massimiliano Rossi, Marco Oliva, Ben Langmead, 
      Travis Gagie, and Christina Boucher

The input file cannot contain the characters 0, 1 or 2 which are
used internally by the algorithm.
"""
version = "@MONI_VERSION@"
install = @USE_INSTALL_PATH@

dirname                 = os.path.dirname(os.path.abspath(__file__))


bigbwt_dirname          = dirname
bigrepair_dirname       = dirname
thresholds_dirname      = dirname
compress_dirname        = dirname
shaped_slp_dirname      = dirname
repair_dirname          = dirname
largeb_repair_dirname   = dirname
align_dirname           = dirname
extend_dirname          = dirname
spumoni_dirname         = dirname
phoni_dirname           = dirname

if not install:

  bigbwt_dirname        = os.path.join(dirname, "_deps/bigbwt-build")
  bigrepair_dirname     = os.path.join(dirname, "_deps/bigrepair-src")
  thresholds_dirname    = os.path.join(dirname, "_deps/pfp_thresholds-build/test/src")
  compress_dirname      = os.path.join(dirname, "src")
  shaped_slp_dirname    = os.path.join(dirname, "_deps/shaped_slp-build")
  repair_dirname        = os.path.join(bigrepair_dirname, "repair")
  largeb_repair_dirname = os.path.join(bigrepair_dirname, "largeb_repair")
  align_dirname         = os.path.join(dirname, "src/align")
  extend_dirname        = os.path.join(dirname, "src/extend")
  spumoni_dirname       = os.path.join(dirname, "src/spumoni")
  phoni_dirname         = os.path.join(dirname, "src/phoni")


pfp                     = "@PFP_EXE@"
pfp_check               = "@PFP_CHECK_EXE@"

pfp_thresholds          = "@PFP_THRESHOLDS_EXE@"

rlebwt_ms_exe           = os.path.join(compress_dirname, "rlebwt_ms_build")

compress_exe            = os.path.join(compress_dirname, "compress_dictionary")

largerepair_exe         = "@LARGEREPAIR_EXE@" # os.path.join(bigrepair_dirname,"largeb_repair/irepair")
# preprocess dict into a sequence of int32 representing both chars and distinct EOS 
preprocess_exe          = "@PREPROCESS_EXE@" # os.path.join(bigrepair_dirname,"procdic")
# create final output file
postprocess_exe         = "@POSTPROCESS_EXE@" # os.path.join(bigrepair_dirname,"postproc")

shaped_slp              = os.path.join(shaped_slp_dirname, "SlpEncBuild")

build_moni_exe          = os.path.join(align_dirname, "rlebwt_ms_full_build")
build_phoni_ms_exe      = os.path.join(phoni_dirname, "build_phoni")
build_spumoni_exe       = os.path.join(spumoni_dirname, "build_spumoni")

run_moni_exe            = os.path.join(align_dirname, "align_full_ksw2")
run_moni_ms_exe         = os.path.join(compress_dirname, "ms")
run_moni_mems_exe       = os.path.join(compress_dirname, "mems")
run_moni_extend_exe     = os.path.join(extend_dirname, "extend_ksw2")
run_phoni_ms_exe        = os.path.join(phoni_dirname, "run_phoni")
run_spumoni_exe         = os.path.join(spumoni_dirname, "run_spumoni")

def get_max_memory():
  try:
    from psutil import virtual_memory
    return virtual_memory().total
  except ImportError as e:
    print("psutil not found! Using system calls to get maximum memory size.")
    if sys.platform == "linux" or sys.platform == "linux2":
      return int(os.popen('free -b').readlines()[1].split()[1])
    elif sys.platform == "darwin":
      return int(os.popen('sysctl -n hw.memsize').readlines()[0].split()[0])


class logger(object):
    def __init__(self, logfile_name):
        self.terminal = sys.stdout
        self.filename = logfile_name
        self.log = open(logfile_name, "a")
   
    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)  

    def flush(self):
        # this flush method is needed for python 3 compatibility.
        # this handles the flush command by doing nothing.
        # you might want to specify some extra behavior here.
        pass

    def __del__(self):
        self.log.close()    



def build_pfp(args):
  start = time.time()

  command = "{exe} -w {wsize} -p {pval} -j {jobs} -o {out} --tmp-dir {tmp} ".format(
      exe     = pfp,
      wsize   = args.wsize,
      pval    = args.mod,
      jobs    = args.threads,
      out     = args.output,
      tmp     = args.tmp_dir)

  command += "-c " # Add compression
  command += "-i " # add lidx
  command += "-l " # add lvsm
  if args.verbose: command += "--verbose "

  if args.reference is not None: 
    command += "-r {ref} -v {vcf} -H {H} ".format( # --use-acceleration ".format( # Apparently --use-acceleration is bugged
      ref = args.reference.replace(',',' '),
      vcf = args.vcf.replace(',',' '),
      H   = args.haplotype 
    )
    if args.n_samples is not None: 
      command += "-m {} ".format(args.n_samples)
    elif args.samples is not None:
      command += "-S {} ".format(args.samples)
  elif args.fasta is not None: # TODO: Change this when pfp will suport different formats
    command += "-f {} ".format(args.fasta)

  if not args.no_acgt_only :
    command += "--acgt-only "


  print("==== Computing PFP. \nCommand:", command)
  if not execute_command(command,args.log):
    raise SystemExit

  print("==== PFP Elapsed time: {0:.4f}\n".format(time.time()-start));


def check_pfp(args):
  start = time.time()

  command = "{exe} -w {wsize} -p {out}.parse -d {out}.dict ".format(
          exe     = pfp_check,
          wsize   = args.wsize,
          out     = args.output)

  print("==== Checking PFP. \nCommand:", command)
  if not execute_command(command,args.log):
    raise SystemExit
  print("==== Checking PFP Elapsed time: {0:.4f}\n".format(time.time()-start));


class PFP(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    # print("{} PFP started!".format(self.getName()))

    self.exc = None
    try:
      build_pfp(self.args)
      check_pfp(self.args)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc


def build_thresholds(args):
  start = time.time()
  parse_size = os.path.getsize(args.output+".parse")/4
  dictionary_size = os.path.getsize(args.output+".dict")

  exe = pfp_thresholds    
  if(parse_size >=  (2**31-1) or dictionary_size >=  (2**31-4) ):
    exe += "64" 

  command = "{exe} {file} -w {wsize}".format(
      exe = exe,
      wsize=args.wsize, file=args.output)
  if args.stats: command += " -m"

  command += " -r"
  
  print("==== Computing Thresholds. \nCommand:", command)
  if not execute_command(command,args.log):
    raise SystemExit
  print("==== Thresholds Elapsed time: {0:.4f}\n".format(time.time()-start));




class PFPthresholds(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    # print("{} PFP Thresholds started!".format(self.getName()))        # "Thread-x started!"

    self.exc = None
    try:
      build_thresholds(self.args)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc
    

def build_bigrepair(args):

  print("==== Building BigRePair grammar.\n", flush=True)

  mem = get_max_memory()
  repair_mem  = round(mem / 1024 / 1024) # total physical memory available in MB
  print("Set RePair maximum memory: {}\n".format(repair_mem), flush=True)

  sstart = time.time()
  # ---- preprocess the dictionary 
  start = time.time()
  # exe = integer_preprocess_exe if args.i else preprocess_exe
  exe = preprocess_exe
  command = "{exe} {file}.dicz".format(
            exe = os.path.join(bigrepair_dirname, exe), file=args.output)
  print("==== Preprocessing the dictionary.\nCommand:", command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  preprocess_time = time.time()-start
  print("==== Preprocess time: {0:.4f}\n".format(preprocess_time), flush=True)

  # ---- apply repair to the modified dictionary
  start = time.time()

  command = "{exe} {file}.dicz.int {mb}".format(mb=repair_mem,
          exe = os.path.join(bigrepair_dirname,largerepair_exe), file=args.output)
  print("==== Repair dictionary.\nCommand:", command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  repair_time = time.time()-start
  print("==== Repair dictionary time: {0:.4f}\n".format(repair_time), flush=True)
  
  # ---- apply repair to the parse     
  start = time.time()

  command = "{exe} {file}.parse {mb}".format(mb=repair_mem,
          exe = os.path.join(bigrepair_dirname,largerepair_exe), file=args.output)
  print("==== Repair parse.\nCommand:", command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  repair_time = time.time()-start
  print("==== Repair parse time: {0:.4f}\n".format(repair_time), flush=True)

  # ---- postprocess
  start = time.time()
  exe = postprocess_exe
  # exe = integer_postprocess_exe if args.i else postprocess_exe
  command = "{exe} {file}".format(
            exe = os.path.join(bigrepair_dirname,exe), file=args.output)
  print("==== Postprocessing the dictionary.\nCommand:", command, flush=True)
  fp = tempfile.TemporaryFile()
  if not execute_command(command,args.log,fp):
    raise SystemExit

  postprocess_time = time.time()-start
  print("==== Postprocess time: {0:.4f}\n".format(postprocess_time), flush=True)


  command = "rm -f {file}.parse.C {file}.parse.R {file}.dicz.int {file}.dicz.int.C {file}.dicz.int.R".format(file=args.output)
  if not execute_command(command,args.log):
    raise SystemExit

  total_time = time.time()-sstart
  print("==== BigRePair Elapsed time: {0:.4f}\n".format(total_time), flush=True)

class bigrepair(threading.Thread):
  def __init__(self, name, counter, args):
    threading.Thread.__init__(self)
    self.threadID = counter
    self.name = name
    self.counter = counter
    self.args = args

  def run(self):
    # print("{} bigrepair started!".format(self.getName()), flush=True) 
      
    self.exc = None
    try:
      build_bigrepair(self.args)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc


def build_slp(args):
  grammars = {
    'plain' : 'PlainSlp_FblcFblc',
    'shaped': 'SelfShapedSlp_SdSd_Sd'
  }

  grammar_extensions = {
    'plain' : 'plain.slp',
    'shaped': 'slp'
  }

  # ---- compress the dictionary 
  start = time.time()
  exe = shaped_slp
  command = "{exe} -i {file} -o {file}.{ext} -e {grammar} -f Bigrepair".format(
            exe = os.path.join(bigrepair_dirname, exe), file=args.output,
            ext = grammar_extensions[args.grammar], grammar = grammars[args.grammar])
  print("==== ShapedSLP construction.\nCommand:", command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  print("==== ShapedSLP construction time: {0:.4f}\n".format(time.time()-start), flush=True)



class SLP(threading.Thread):
  def __init__(self, name, counter, args):
        threading.Thread.__init__(self)
        self.threadID = counter
        self.name = name
        self.counter = counter
        self.args = args

  def run(self):
    print("{} shaped_slp started!".format(self.getName()), flush=True)
    
    self.exc = None
    try:
      build_slp(self.args)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc
      


def build_helper(args, exe, exe_name):
  start = time.time()
  command = "{exe} {file}".format(exe=os.path.join(
      args.exe_dir, exe), file=args.output)
  if args.no_lcp:
      command += " -n"

  print("==== Running {name}. \nCommand:".format(
      name=exe_name), command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  print("==== Running {name} Elapsed time: {0:.4f}\n".format(
      time.time()-start, name=exe_name), flush=True)
  # ---- print elapsed time to file
  command = "echo Total construction time: {0:.4f}".format(
      time.time()-start)
  if not execute_command(command,args.log):
    raise SystemExit

class build_helper_thread(threading.Thread):
  def __init__(self, name, counter, args, exe):
      threading.Thread.__init__(self)
      self.threadID = counter
      self.name = name
      self.counter = counter
      self.args = args
      self.exe = exe

  def run(self):

    self.exc = None
    try:
      build_helper(self.args, self.exe, self.name)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc



def build(args):

  if args.fasta and args.threads > 0 and (".fq" in args.fasta or ".fastq" in args.fasta or ".fnq" in args.fasta):
    print("moni does not current support FASTQ format! Exiting...", flush=True)
    return
  
  # Generate logfile name
  logfile_name = args.output
  if args.log_file is not None:
    logfile_name = args.log_file

  logfile_name += ".moni.log"
  # get main bigbwt directory
  args.exe_dir = os.path.split(sys.argv[0])[0]
  print("Sending logging messages to file:", logfile_name, flush=True)
  log = logger(logfile_name)
  sys.stdout = log

  args.log = log
  start0 = time.time()
  try:
    # ---------- parsing of the input file
    pfp_thread = PFP(name = "{}".format(args.output), args=args, counter=1)  # ...Instantiate a thread and pass a unique ID to it
    pfp_thread.start()                                      # ...Start the thread, invoke the run method
    pfp_thread.join()                                       # ...Start the thread, invoke the run method

    # ----------- computation of the PFP data structures
    pf_thresholds_thread = PFPthresholds(name="{}".format(args.output), args=args, counter=1)
    pf_thresholds_thread.start()
    pf_thresholds_thread.join()

    if args.moni or args.moni_ms or args.phoni_ms:
      bigrepair_thread = bigrepair(name="{}".format(args.output), args=args, counter=2)
      bigrepair_thread.start()
      bigrepair_thread.join()

      SLP_thread = SLP(name="{}".format(args.output), args=args, counter=2)
      SLP_thread.start()
      SLP_thread.join()

    # ---- Building final data structures
    if args.moni_ms:
      build_moni_ms_thread = build_helper_thread(name="{}".format(args.output), args=args, counter=2, exe=rlebwt_ms_build)
      build_moni_ms_thread.start()
      build_moni_ms_thread.join()
    if args.moni:
      build_moni_thread = build_helper_thread(name="{}".format(args.output), args=args, counter=2, exe=build_moni_exe)
      build_moni_thread.start()
      build_moni_thread.join()
    if args.phoni_ms:
      build_phoni_ms_thread = build_helper_thread(name="{}".format(args.output), args=args, counter=2, exe=build_phoni_ms_exe)
      build_phoni_ms_thread.start()
      build_phoni_ms_thread.join()
    if args.spumoni:
      build_spumoni_thread = build_helper_thread(name="{}".format(args.output), args=args, counter=2, exe=build_spumoni_exe)
      build_spumoni_thread.start()
      build_spumoni_thread.join()

  except BaseException as e:
      raise e 

  print("==== Total construction time: {0:.4f}\n".format(
  time.time()-start0), flush=True)
  # ---- print elapsed time to file
  command = "echo Total construction time: {0:.4f}".format(
      time.time()-start0)
  if not execute_command(command,args.log):
    raise SystemExit

  # ---- delete intermediate files
  delete_temp_files(args, args.log)

  print("==== Done\n", flush=True)


def query_helper(args, exe, exe_name):
  start = time.time()
  if args.pattern is not None:
    command = "{exe} {file} -p {query} -t {th}".format(exe=os.path.join(
        args.exe_dir, exe), file=args.index,
        query=args.pattern, th=args.threads)
  else:
    command = "{exe} {file} -1 {mate1} -2 {mate2} -t {th}".format(exe=os.path.join(
        args.exe_dir, exe), file=args.index,
        mate1=args.mate1, mate2=args.mate2, th=args.threads)

  if exe_name == "MONI" or exe_name == "MONI-EXTEND":
    command += " -b {} -A {} -B {} -O {} -E {} -L {} -l {}".format(args.batch,args.smatch, args.smismatch, args.gapo, args.gape, args.extl, args.minl)
  
  if exe_name == "MONI":
    if args.dir_dis:
      command += " -d"
    if args.seed_dis:
      command += " -s"
    command += " -D {} -S {} ".format(args.dir_thr,args.seed_thr)

  if exe_name != "SPUMONI" and args.grammar == "shaped":
    command += " -q"

  if args.output != ".":
    command += " -o {}".format(args.output)

  print("==== Running {name}. \nCommand:".format(
      name=exe_name), command, flush=True)
  if not execute_command(command,args.log):
    raise SystemExit
  print("==== Running {name} Elapsed time: {0:.4f}\n".format(
      time.time()-start, name=exe_name), flush=True)
  # ---- print elapsed time to file
  command = "echo Total query time: {0:.4f}".format(
      time.time()-start)
  if not execute_command(command,args.log):
    raise SystemExit


class run_helper(threading.Thread):
  def __init__(self, name, counter, args, exe):
      threading.Thread.__init__(self)
      self.threadID = counter
      self.name = name
      self.counter = counter
      self.args = args
      self.exe = exe

  def run(self):
    self.exc = None
    try:
      query_helper(self.args, self.exe, self.name)
    except BaseException as e:
      self.exc = e

  def join(self):
    threading.Thread.join(self)
    if self.exc:
      raise self.exc



def query(args):
  if args.log_file is None:
    if args.pattern is not None:
      logfile_name = args.pattern + "." + args.which + ".log"
    else:
      logfile_name = args.mate1 + "." + args.which + ".log"
  else:
    logfile_name = args.log_file + "." + args.which + ".log"
  # get main bigbwt directory
  args.exe_dir = os.path.split(sys.argv[0])[0]
  print("Sending logging messages to file:", logfile_name, flush=True)
  log = logger(logfile_name)
  sys.stdout = log

  try:
    args.log = log
    if args.which == 'ms':
      if args.moni_ms:
        run_moni_ms = run_helper(
                name="MONI-MS", args=args, counter=2,exe=run_moni_ms_exe)
        run_moni_ms.start()
        run_moni_ms.join()
      elif args.phoni_ms:
        run_phoni_ms = run_helper(
                name="PHONI-MS", args=args, counter=2,exe=run_phoni_ms_exe)
        run_phoni_ms.start()
        run_phoni_ms.join()
        

    if args.which == 'pseudo_ms':
      run_spumoni = run_helper(
          name="SPUMONI", args=args, counter=2, exe=run_spumoni_exe)
      run_spumoni.start()
      run_spumoni.join()

    if args.which == 'mems':
      run_moni_ms = run_helper(
              name="MONI-MEMS", args=args, counter=2,exe=run_moni_mems_exe)
      run_moni_ms.start()
      run_moni_ms.join()

    if args.which == 'extend':
      run_moni_extend = run_helper(
              name="MONI-EXTEND", args=args, counter=2,exe=run_moni_extend_exe)
      run_moni_extend.start()
      run_moni_extend.join()

    if args.which == 'align':
      if args.moni:
        run_moni = run_helper(
                name="MONI", args=args, counter=2,exe=run_moni_exe)
        run_moni.start()
        run_moni.join()
      elif args.phoni:
        run_phoni = run_helper(
                name="PHONI", args=args, counter=2,exe=run_phoni_exe)
        run_phoni.start()
        run_phoni.join()
  except BaseException as e:
    raise e 


def getGitDesc():
  branch = subprocess.check_output(
      'git rev-parse --abbrev-ref HEAD', shell=True, cwd=dirname).strip().decode("utf-8")
  commit = subprocess.check_output(
      'git rev-parse HEAD', shell=True, cwd=dirname).strip().decode("utf-8")
  try:
    tag = subprocess.check_output('git describe --exact-match {commit_id}'.format(commit_id=commit),
                                  shell=True, cwd=dirname).strip().decode("utf-8")
  except subprocess.CalledProcessError as e:
    tag = ""
  return "branch: {branch}\n   tag: {tag}\ncommit: {commit}".format(branch=branch, tag=tag, commit=commit)


def base(args):
  if args.version:
    print(getGitDesc())


def getVersion():
  if not version:
    return getGitDesc()
  else:
    return version

def main():
  parser = argparse.ArgumentParser( description=Description, formatter_class=argparse.RawTextHelpFormatter)
  subparsers = parser.add_subparsers(title='subcommands',description='valid subcommands', help='additional help')
  build_parser = subparsers.add_parser('build', help='build help', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  ms_parser = subparsers.add_parser('ms', help='build help', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  pseudo_ms_parser = subparsers.add_parser('pseudo-ms', help='build help', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  mems_parser = subparsers.add_parser('mems', help='compute the maximal exact matches', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  extend_parser = subparsers.add_parser('extend', help='extend the MEMs ofthe reads in the reference genome', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  align_parser = subparsers.add_parser('align', help='align the reads to the reference genome', formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  parser.add_argument('--version', action='version', version='%(prog)s\n{}'.format(getVersion()))

  build_parser.add_argument('-r', '--reference',        help='coma-separated list of reference files, e.g., ref1[,ref2,ref3].', type = str)
  vcf_group = build_parser.add_argument_group('VCF', 'Arguments for VCF files')
  vcf_group.add_argument('-v', '--vcf',                 help='coma-separated list of VCF files, e.g., vcf1[,vcf2,vcf3].', type = str)
  vcf_group.add_argument('-H', '--haplotype',           help='Haplotype to generate. [1,2,12].', default="1", type = str)
  mutual_exclusive = vcf_group.add_mutually_exclusive_group()
  mutual_exclusive.add_argument('-n', '--n-samples',    help='number of samples in the VCF file to analyze.', type = int)
  mutual_exclusive.add_argument('-S', '--samples',      help='file containing the list of samples to parse.', type = str)
  fasta_group = build_parser.add_argument_group('FASTA', 'Arguments for FASTA files')
  fasta_group.add_argument('-f', '--fasta',             help='coma-separated list of FASTA files, e.g., fa1[,fa2,fa3].', type = str)
  pfp_group = build_parser.add_argument_group('PFP', 'Arguments for PFP generation')
  pfp_group.add_argument('-w', '--wsize',               help='sliding window size', default=10, type=int)
  pfp_group.add_argument('-p', '--mod',                 help='hash modulus', default=100, type=int)
  build_parser.add_argument('-o', '--output',           help='output directory path', type = str, default='.')
  build_parser.add_argument('-t', '--threads',          help='number of helper threads', default=1, type=int)
  build_parser.add_argument('--log-file',               help="Log filename prefix.", type = str)
  build_parser.add_argument('--tmp-dir',                help="Tmp file directory.", default = ".", type = str)
  build_parser.add_argument('-k',                       help='keep temporary files',action='store_true')
  build_parser.add_argument('--no-acgt-only',           help='do not convert non ACGT characters.',action='store_true')
  build_parser.add_argument('--no-lcp',                 help='build the moni index without the lcp samples.',action='store_true')
  build_parser.add_argument('--verbose',                help='verbose',action='store_true')
  build_parser.add_argument('--moni',                   help='build moni index',action='store_true')
  build_parser.add_argument('--phoni',                  help='build phoni index',action='store_true')
  build_parser.add_argument('--moni-ms',                help='build moni index for matching statistics only',action='store_true')
  build_parser.add_argument('--phoni-ms',               help='build phoni index for matching statistics only', action='store_true')
  build_parser.add_argument('--spumoni',                help='build spumoni index',action='store_true')
  build_parser.add_argument('-g', '--grammar',          help='select the grammar (only for moni and phoni) [plain, shaped]', type=str, default='plain')
  build_parser.add_argument('--stats',                  help='print statistics.',action='store_true')
  build_parser.set_defaults(which='build')

  ms_parser.add_argument('-i', '--index',   help='reference index folder', type=str, required=True)
  ms_parser.add_argument('-p', '--pattern', help='the input query', type=str, required=True)
  ms_parser.add_argument('-o', '--output',  help='output directory path', type=str, default='.')
  ms_parser.add_argument('-t', '--threads', help='number of helper threads', default=1, type=int)
  ms_parser.add_argument('-g', '--grammar', help='select the grammar (only for moni and phoni) [plain, shaped]', type=str, default='plain')
  ms_parser.add_argument('--moni-ms',       help='run moni index for matching statistics only',action='store_true')
  ms_parser.add_argument('--phoni-ms',      help='run phoni index for matching statistics only', action='store_true')
  ms_parser.add_argument('--log-file',      help="Log filename prefix.", type = str)
  ms_parser.set_defaults(which='ms')

  pseudo_ms_parser.add_argument('-i', '--index',    help='reference index folder', type=str, required=True)
  pseudo_ms_parser.add_argument('-p', '--pattern',  help='the input query', type=str, required=True)
  pseudo_ms_parser.add_argument('-o', '--output',   help='output directory path', type=str, default='.')
  pseudo_ms_parser.add_argument('-t', '--threads',  help='number of helper threads', default=1, type=int)
  pseudo_ms_parser.add_argument('--log-file',       help="Log filename prefix.", type = str)
  pseudo_ms_parser.set_defaults(which='pseudo_ms')


  mems_parser.add_argument('-i', '--index',     help='reference index folder', type=str, required=True)
  mems_parser.add_argument('-p', '--pattern',   help='the input query', type=str, required=True)
  mems_parser.add_argument('-o', '--output',    help='output file prefix', type=str, default='.')
  mems_parser.add_argument('-t', '--threads',   help='number of helper threads', default=1, type=int)
  mems_parser.add_argument('-g', '--grammar',   help='select the grammar [plain, shaped]', type=str, default='plain')
  mems_parser.add_argument('--log-file',        help="Log filename prefix.", type = str)
  mems_parser.set_defaults(which='mems')

  extend_parser.add_argument('-i', '--index',     help='reference index folder', type=str, required=True)
  extend_parser.add_argument('-p', '--pattern',   help='the input query', type=str, required=True)
  extend_parser.add_argument('-o', '--output',    help='output directory path', type=str, default='.')
  extend_parser.add_argument('-t', '--threads',   help='number of helper threads', default=1, type=int)
  extend_parser.add_argument('-b', '--batch',     help='number of reads per thread batch', default=100, type=int)
  extend_parser.add_argument('-g', '--grammar',   help='select the grammar [plain, shaped]', type=str, default='plain')
  extend_parser.add_argument('-l', '--minl',       help='minimum seed length', type=int, default=25)
  extend_parser.add_argument('-L', '--extl',      help='length of reference substring for extension', type=int, default=100)
  extend_parser.add_argument('-A', '--smatch',    help='match score value', type=int, default=2)
  extend_parser.add_argument('-B', '--smismatch', help='mismatch penalty value', type=int, default=4)
  extend_parser.add_argument('-O', '--gapo',      help='coma separated gap open penalty values', type=str, default='4,13')
  extend_parser.add_argument('-E', '--gape',      help='coma separated gap extension penalty values', type=str, default='2,1')
  extend_parser.add_argument('--log-file',        help="Log filename prefix.", type = str)
  extend_parser.set_defaults(which='extend')

  align_parser.add_argument('-i', '--index',      help='reference index folder', type=str, required=True)
  align_parser.add_argument('-p', '--pattern',    help='the input query', type=str)
  align_parser.add_argument('-1', '--mate1',      help='path to the input left end of the reads', type=str)
  align_parser.add_argument('-2', '--mate2',      help='path to the input right end of the reads', type=str)
  align_parser.add_argument('-o', '--output',     help='output directory path', type=str, default='.')
  align_parser.add_argument('-t', '--threads',    help='number of helper threads', default=1, type=int)
  align_parser.add_argument('-b', '--batch',      help='number of reads per thread batch', default=512, type=int)
  align_parser.add_argument('-g', '--grammar',    help='select the grammar (only for moni and phoni) [plain, shaped]', type=str, default='plain')
  align_parser.add_argument('-l', '--minl',       help='minimum seed length', type=int, default=25)
  align_parser.add_argument('-L', '--extl',       help='length of reference substring for extension', type=int, default=100)
  align_parser.add_argument('-A', '--smatch',     help='match score value', type=int, default=2)
  align_parser.add_argument('-B', '--smismatch',  help='mismatch penalty value', type=int, default=4)
  align_parser.add_argument('-O', '--gapo',       help='coma separated gap open penalty values', type=str, default='4,13')
  align_parser.add_argument('-E', '--gape',       help='coma separated gap extension penalty values', type=str, default='2,1')
  align_parser.add_argument('-d', '--dir-dis',    help='disable direction filtering.', action='store_true')
  align_parser.add_argument('-D', '--dir-thr',    help='direction filtering threshold.', type=float, default='50.0')
  align_parser.add_argument('-s', '--seed-dis',   help='disable seed filtering.', action='store_true')
  align_parser.add_argument('-S', '--seed-thr',   help='seed filtering threshold.', type=int, default=5000)
  align_parser.add_argument('--no-lcp',           help='build the moni index without the lcp samples.',action='store_true')
  align_parser.add_argument('--moni',             help='run moni index',action='store_true')
  align_parser.add_argument('--phoni',            help='run phoni index', action='store_true')
  align_parser.add_argument('--log-file',         help="Log filename prefix.", type = str)
  align_parser.set_defaults(which='align')
  args = parser.parse_args()


  # Create directory for output
  if args.output != ".":
    basepath = os.path.dirname(args.output)
    if basepath != "":
      os.makedirs(basepath, exist_ok=True)

  # Set default flags for build and ms
  if args.which == 'build':
    args.moni = args.moni or not (args.moni_ms or args.phoni_ms or args.spumoni)
  if args.which == 'ms':
    args.moni_ms = args.moni_ms or not args.phoni_ms
  if args.which == 'align':
    args.moni = args.moni or not args.phoni

  if args.which == 'base':
    base(args)
  elif args.which == 'build':
    build(args)
  elif args.which == 'ms' or args.which == 'pseudo_ms' or args.which == 'align' or args.which == 'mems' or args.which == 'extend':
    query(args)

  return

# delete intermediate files
def delete_temp_files(args,log):
    if args.k==False:
      print("==== Deleting temporary files.", flush=True) # no need to show the command
      # command = "rm -f {file}.parse_old {file}.last {file}.bwlast {file}.ilist".format(file=args.reference)
      command = "rm -f {file}.parse {file}.parse_old {file}.last {file}.bwlast {file}.dict {file}.dicz {file}.ilist {file}.occ {file}.esa {file}.ssa {file}.dicz.len {file}.C {file}.R {file}.bwt.len {file}.bwt.heads {file}.thr {file}.thr_pos".format(
          file=args.output)
      if not execute_command(command,args.log):
        raise SystemExit
      for i in range(args.threads):
        command = "rm -f {file}.{i}.parse_old {file}.{i}.last".format(file=args.output, i=i)
        if not execute_command(command,args.log):
          raise SystemExit
      
      command = "rm -f {file}.sai {file}.bwsai".format(file=args.output);
      if not execute_command(command,args.log):
        raise SystemExit
      for i in range(args.threads):
        command = "rm -f {file}.{i}.sai".format(file=args.output, i=i)
        if not execute_command(command,args.log):
          raise SystemExit

def execute_command(command,log,soft=False, env=None):
  proc=subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  for line in proc.stdout:
      log.write(line.decode('utf-8'))
  if proc.wait() != 0:
    print("Error executing command line:", flush=True)
    print("\t"+ command, flush=True)
    print("Check log file: " + log.filename, flush=True)
    if not soft:
      exit(1)
    return False
  return True


if __name__ == '__main__':
    main()
